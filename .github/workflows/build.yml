name: Build and push packages

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate_label: 
    runs-on: ubuntu-latest

    steps: 
      - name: "Validate label"
        if: | 
          (contains(github.event.pull_request.labels.*.name, 'backend') ||
            contains(github.event.pull_request.labels.*.name, 'frontend') || 
            contains(github.event.pull_request.labels.*.name, 'indexer')) == false &&
          (github.event_name == 'pull_request')        
        run: exit 1
      
  test_data_contract:
    needs: validate_label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: NPM install
        run: cd packages/data-contract && npm install

      - name: Check lint rules
        run: cd packages/data-contract && npm run lint

  test_frontend:
    needs: validate_label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: NPM install
        run: cd packages/frontend && npm install

      - name: Check lint rules
        run: cd packages/frontend && npm run lint

  test_api:
    needs: validate_label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: NPM install
        run: cd packages/api && npm install

      - name: Check lint rules
        run: cd packages/api && npm run lint

      - name: Run unit tests
        run: cd packages/api && npm run test:unit

      - name: Migrate DB
        run: cd packages/api && POSTGRES_HOST=127.0.0.1 POSTGRES_DB=postgres POSTGRES_USER=postgres POSTGRES_PASS=postgres POSTGRES_DB=postgres npm run db:migrate

      - name: Run integration tests
        run: cd packages/api && POSTGRES_HOST=127.0.0.1 POSTGRES_DB=postgres POSTGRES_USER=postgres POSTGRES_PASS=postgres POSTGRES_DB=postgres npm run test:integration

  build_api:
    runs-on: ubuntu-latest
    needs: validate_label
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API package Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./packages/api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api

  build_indexer:
    needs: validate_label
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API package Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./packages/indexer
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:indexer

  drop_db:
    runs-on: ubuntu-latest
    needs: [build_api, build_indexer, test_data_contract, test_api, test_frontend]
    
    if: (github.event_name != 'pull_request' || github.event.pull_request.merged == true)
    
    steps:
      - uses: Stockopedia/action-get-changed-files@v1
        id: changes
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ignore: "**/+(.github)"
          foldersOnly: false 
          format: csv
      
      - name: Drop database
        if: ${{contains(steps.changes.outputs.changed, 'packages/indexer/')}}
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker stop $(docker ps -f name=platform-explorer-api -q)
            docker stop $(docker ps -f name=platform-explorer-indexer -q)
            docker run --rm --env-file api.env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api npm run db:drop
            docker run --rm --env-file api.env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:indexer refinery migrate -e DATABASE_URL -p /app/migrations

  deploy:
    runs-on: ubuntu-latest
    needs: [build_api, build_indexer, test_data_contract, test_api, test_frontend]
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Deploy to the server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            git -C ./platform-explorer pull
            docker pull owl352/refinery_cli_docker
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:indexer
            docker stop $(docker ps -f name=platform-explorer-api -q)
            docker stop $(docker ps -f name=platform-explorer-indexer -q)
            docker rm platform-explorer-api platform-explorer-indexer
            docker run -d -p 3005:3005 --restart always --env-file api.env --name platform-explorer-api ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api
            sleep 3
            docker run -d --env-file api.env --restart always --name platform-explorer-indexer ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:indexer ./indexer
            
  create_tag:
    runs-on: ubuntu-latest
    needs: [build_api, build_indexer, test_data_contract, test_api, test_frontend]
    
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./

      - name: 'Generate changelog'
        id: changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          headerLabel: "# üìë Changelog"
          breakingLabel: '### üí• Breaking'
          enhancementLabel: '### üöÄ Enhancements'
          bugsLabel: '### üêõ Bug fixes'
          deprecatedLabel: '### ‚ö†Ô∏è Deprecations'
          removedLabel: '### üî• Removals'
          securityLabel: '### üõ°Ô∏è Security'
          issuesLabel: '### üìÅ Other issues'
          prLabel: '### üìÅ Other pull requests'
          addSections: '{"indexer":{"prefix":"### üß© Indexer","labels":["indexer"]},"api":{"prefix":"###üìä API","labels":["backend"]},"frontend":{"prefix":"###üë®‚Äçüíª frontend","labels":["frontend"]}}'
          issues: true
          issuesWoLabels: true
          pullRequests: true
          prWoLabels: true
          author: true
          unreleased: true
          compareLink: true
          stripGeneratorNotice: true
          verbose: true

      - name: "üñ®Ô∏è Print changelog to console"
        run: cat CHANGELOG.md

      - name: "üì§ Upload changelog"
        uses: actions/upload-artifact@v4
        with:
          name: "Changelog"
          path: CHANGELOG.md

      - name: Create a GitHub release
        if: ${{steps.package-version.outputs.current-version != steps.previoustag.outputs.tag }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.package-version.outputs.current-version}}
          name: Release ${{ steps.package-version.outputs.current-version}}
          body: ${{steps.changelog.outputs.changelog}}